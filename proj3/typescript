Script started on Mon 02 Oct 2017 06:46:42 PM EDT
bda5@augusta:~/112/proj3$ ls
Application.cpp  tester.cpp  Vec.h	       vecTest1.txt	 VecTester.cpp
Application.h	 typescript  vecStreamOut.txt  vecTest2Copy.txt  VecTester.h
Debug		 Vec.cpp     vecTest1Copy.txt  vecTest2.txt
bda5@augusta:~/112/proj3$ cat Application.cpp
/*
 * Application.cpp
 * Student Name:Bryce Allen & Catherine DeJager
 * Date:9-26-17
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 * Edited by: Bryce Allen and Catherine DeJager, for CS 112 project 3 at Calvin College.
 *
 * Bryce Allen:
 * Retrieve [] operator
 * != operator
 * subtraction (-) operator
 * readFrom() method
 *
 * Catherine DeJager:
 * assignment [] operator
 * + operator
 * * operator
 * writeTo() method
 */

#include "Application.h"
#include<iostream>
#include"Vec.h"
using namespace std;

/*
 * Default constructor
 * (no instance variables... this is the only constructor we need.)
 */
Application::Application() {

}
/*
 * prompts the user to input dimensions for a new postition...
 * @params num: number of spaces in the position. vec: the Vector the positions will be stored into.
 */
void Application::inputDimensions(unsigned num, Vec& vec) {
	for (unsigned i = 0; i < num; i++) {
		cout << "Enter a value for dimension " << i + 1 << endl;
		double j;
		cin >> j;
		vec[i]=j;
	}
}
/* Written by Bryce Allen and Catherine DeJager.
 * Writes the application
 */
void Application::app(){
	//1
	cout<<"Welcome to vector simulator application!"<< endl<< "Enter the number of dimensions..."<< endl;
	unsigned numDimensions;
	cin>>numDimensions;
	//2
	cout<< "Enter a starting position..."<< endl;
	Vec startVec(numDimensions);
	inputDimensions(numDimensions, startVec);
	//3
	Vec resultVec(startVec);
	unsigned numVecs;
	numVecs = 0;
	cout<< "Enter as many Vectors as you would like."<< endl;
	while(true){
		Vec v0(numDimensions);
		inputDimensions(numDimensions, v0);
		resultVec = resultVec+v0;
		cout<<
		numVecs++;
		cout<<"You have entered "<< numVecs<< " position(s)."<<endl;
		string t;
		cout<< "Would you want to put in another position? (y for yes, anything else for no)"<< endl;
		cin>>t;
		if(t=="y"){}else{break;}
	}
	//4
	cout<<"Here is the sum of all the positions: " << endl;
	resultVec.writeTo(cout);
}

bda5@augusta:~/112/proj3$ cat Application.h
/*
 * Application.h
 * Student Name:Bryce Allen & Catherine DeJager
 * Date:9-26-17
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 * Edited by: Bryce Allen and Catherine DeJager, for CS 112 project 3 at Calvin College.
 *
 * Bryce Allen:
 * Retrieve [] operator
 * != operator
 * subtraction (-) operator
 * readFrom() method
 *
 * Catherine DeJager:
 * assignment [] operator
 * + operator
 * * operator
 * writeTo() method
 */

#ifndef APPLICATION_H_
#define APPLICATION_H_
#include "Vec.h"

class Application {
public:
	Application();
	void app();
private:
	void inputDimensions(unsigned num, Vec& vec);
};

#endif /* APPLICATION_H_ */
bda5@augusta:~/112/proj3$ cat Tester.cpp
cat: Tester.cpp: No such file or directory
bda5@augusta:~/112/proj3$ t cat tester.cpp
/* tester.cpp drives the testing of our Vec class.
 * Student Name:Bryce Allen & Catherine DeJager
 * Date:9-26-17
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 * Edited by: Bryce Allen and Catherine DeJager, for CS 112 project 3 at Calvin College.
 *
 * Bryce Allen:
 * Retrieve [] operator
 * != operator
 * subtraction (-) operator
 * readFrom() method
 *
 * Catherine DeJager:
 * assignment [] operator
 * + operator
 * * operator
 * writeTo() method
 */

#include "VecTester.h"
#include "Application.h"
int main() {
	VecTester vt;
	vt.runTests();

	Application a;
	a.app();
}
bda5@augusta:~/112/proj3$ V cat Vec.cpp
/* Vec.cpp defines the methods for Vec, a simple vector class.
 * Student Name:Bryce Allen & Catherine DeJager
 * Date:9-26-17
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 * Edited by: Bryce Allen and Catherine DeJager, for CS 112 project 3 at Calvin College.
 *
 * Bryce Allen:
 * Retrieve [] operator
 * != operator
 * subtraction (-) operator
 * readFrom() method
 *
 * Catherine DeJager:
 * assignment [] operator
 * + operator
 * * operator
 * writeTo() method
 */
 
#include "Vec.h"
#include <stdexcept>
#include <iostream>
#include <fstream>
#include <cassert>
#include <cstdlib>

Vec::Vec() {
	mySize = 0;
	myArray = NULL;
}

Vec::Vec(unsigned size){
	mySize = size;
	if(size>0){
		myArray = new Item[size]();
	}else{ myArray = NULL; }
}

Vec::Vec(const Vec& original){
	mySize = original.mySize;
	if(original.mySize>0){
			myArray = new Item[original.mySize]();
			for(unsigned i = 0; i<original.mySize; i++ ){
				myArray[i] = original.myArray[i];
			}
		}else{ myArray = NULL; }
}

Vec::~Vec() {
	mySize = 0;
	delete[] myArray; myArray = NULL;
}

Vec& Vec::operator=( const Vec& original ){
	if ( myArray == original.myArray ) return *this;
	mySize = original.mySize;
	if(original.mySize>0){
		myArray = new Item[original.mySize]();
			for(unsigned i = 0; i<original.mySize; i++ ){
				myArray[i] = original.myArray[i];
			}
	}else{ myArray = NULL; }
	return *this;
}

void Vec::setItem( unsigned index, const Item& it ){
	if( index>= mySize ){ throw range_error("index is out of range."); }
	else{ myArray[index] = it; }
}

Item Vec::getItem(unsigned index) const {
	if( index>= mySize ){ throw range_error("index is out of range."); }
	else{ return myArray[index]; }
}

void Vec::setSize( unsigned newSize ){
	if( mySize == newSize ){}
	else if( newSize == 0 ){
		delete[] myArray; myArray = NULL;
		mySize = 0;
	}else{
		Item * b = new Item[newSize]();
		if( mySize<newSize ){
			for( unsigned i = 0; i<mySize; i++ )
			{b[i] = myArray[i];}
		}else{
			for( unsigned i = 0; i<newSize; i++ )
			{b[i] = myArray[i];}
		}
		mySize = newSize;
		delete[] myArray;
		myArray = b;
	}
}

bool Vec::operator==( const Vec& v2 ){
	if( mySize == v2.mySize ){
		for( unsigned i = 0; i<mySize; i++){
			if( myArray[i] == v2.myArray[i] ){}else{ return false; }
		}
		return true;
	}else{ return false; }
}

void Vec::writeTo( ostream& out ) {
	for( unsigned i = 0; i<mySize; i++ ){
		out<< myArray[i]<< " "<< flush;
	}
}

void Vec::readFrom( istream& in ) {
	for( unsigned i = 0; i<mySize; i++){
		in>> myArray[i];
	}
}
/* Finds the item of the specified index of the vector.
 * Written By Bryce Allen and Catherine DeJagger
 * @param index, the position of the item to be returned.
 * @return The item at postition index
 */
Item& Vec::operator[](unsigned index){
	if( index>=mySize ){
		throw range_error("The index is too large.");
	}
	return myArray[index];
}

/* assignment subscript operator
 * Written by Catherine Dejager
 * @param index, the position of the item in the vector we want to update
 * @return The Item to be updated.
 */
const Item& Vec::operator[](unsigned index) const {
	if (index < mySize){
		return myArray[index];
	}
	else {
		throw range_error("Out of range: index must be less than Vec.mySize");
	}
}

/*Subtracts Vectors from Vector.
 * Written by Bryce Allen
 * @param original, the Vec to be subtracted.
 * @return the Vector leftover after subtraction.
 */
Vec Vec::operator-(const Vec& original){
	if(original.mySize!=mySize){throw invalid_argument("Vecs must be of the same size to subtract.");}
	Vec result( original.getSize() );
	for( unsigned i = 0; i<mySize; i++ ){
		Item t = myArray[i]-original.myArray[i];
		result.setItem(i, t);
	}
	return result;
}
/*Tests if two Vecs are equal.
 * Written by Bryce Allen
 * @param original, the Vec to be compared to 'this' Vec.
 * @return true if the Vecs are not equal, false if they are.
 */
bool Vec::operator!=( const Vec& original ){
	if( mySize!=original.mySize ){return true;}
	for( unsigned i = 0; i<mySize; i++){
		if( myArray[i]!=original.myArray[i] ){
			return true;
		}
	}
	return false;
}
/*
 * Reads values from a file and stores them in myArray.
 * Written By Bryce Allen
 * @param: fileName, the name of the file from which we will obtain the values.
 */
void Vec::readFrom( string fileName ) {
	ifstream fin1(fileName.c_str() );
	string temp;
	getline( fin1, temp );
	int numValues = (int)atoi(temp.c_str());
	mySize = numValues;
	Item * newArray = new Item[numValues]();
	for( unsigned i = 0; i<numValues; i++ ){
		string t;
		getline( fin1, t );
		newArray[i] = (Item)atoi(t.c_str());
	}
	delete[] myArray;
	myArray = newArray;
	fin1.close();
}
/*
 * Write the contents of the Vec to a file with the name fileName.
 * Written by Catherine DeJagger
 * @params: string fileName
 * Precondition:
 * Postcondition: The first line is the size of the Vec. Each line afterwards contains the next value in the Vec.
 * Retrieve:
 * Return:
 */
void Vec::writeTo(string fileName) {
	ofstream fout(fileName.c_str());
    //assert(fout.is_open());
	fout << mySize << '\n';
	for (unsigned i=0; i<mySize; i++) {
		fout << myArray[i] << '\n';
	}
}
/* Dot product: returns the sum of the products of each item in the Vecs.
 * Written by Catherine DeJagger
 * @params: const Vec& original
 * Precondition:
 * Postcondition:
 * Retrieve:
 * Return: an int equal to the dot product of both Vecs
 */
int Vec::operator*(const Vec& original) {
	if (mySize != original.mySize) {
			throw invalid_argument("Vectors of different sizes cannot be added together.");
		}
	else {
		int product = 0;
		for (unsigned i = 0; i < mySize; i++) {
			product += (myArray[i] * original.myArray[i]);
		}
		return product;
	}
}
/* Vector addition: adds each item in the Vec together.
 * Written by Catherine DeJagger
 * @params: const Vec& original
 * Precondition:
 * Postcondition:
 * Retrieve:
 * Return: a Vec containing the result of adding this Vec and the other Vec together.
 */
Vec Vec::operator+(const Vec& original) {
	Vec result(original.getSize());
	if (mySize != original.mySize) {
		throw invalid_argument("Vectors of different sizes cannot be added together.");
	}
	else {

		for (unsigned i = 0; i < mySize; i++) {
			result.setItem(i, (myArray[i] + original.myArray[i])); // TODO change setItem to subscript operator
		}
		return result;
	}
}
bda5@augusta:~/112/proj3$ cat Vec.h
/* Vec.h provides a simple vector class named Vec.
 * Student Name:Bryce Allen & Catherine DeJager
 * Date:9-26-17
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 * Edited by: Bryce Allen and Catherine DeJager, for CS 112 project 3 at Calvin College.
 *
 * Bryce Allen:
 * Retrieve [] operator
 * != operator
 * subtraction (-) operator
 * readFrom() method
 *
 * Catherine DeJager:
 * assignment [] operator
 * + operator
 * * operator
 * writeTo() method
 */

#ifndef VEC_H_
#define VEC_H_

#include <iostream>
using namespace std;

typedef double Item;

class Vec {
public:
	Vec();
	Vec(unsigned size);
	Vec(const Vec& original);
	virtual ~Vec();
	
	Vec& operator=( const Vec& original );
	unsigned getSize() const { return mySize; }
	void setItem( unsigned index, const Item& it );
	Item getItem( unsigned index ) const;
	void setSize( unsigned newSize );
	bool operator==( const Vec& v2 );
	void writeTo( ostream& out );
	void readFrom( istream& in );

	Item& operator[](unsigned index); 	//Bryce
	const Item& operator[](unsigned index) const; 		//Catherine
	bool operator!=(const Vec& original);
	Vec operator-(const Vec& original);
	void readFrom( string fileName );
	void writeTo(string fileName);

	int operator*(const Vec& original);
	Vec operator+(const Vec& original);

private:
	unsigned mySize;
	Item * myArray;
	friend class VecTester;
};

#endif /*VEC_H_*/
bda5@augusta:~/112/proj3$ cat vecStreamOut.txt
5
10 11 12 13 14 bda5@augusta:~/112/proj3$ cat vecText1.txt       st1.txt
3
1
2
3

bda5@augusta:~/112/proj3$ cat vecTex st2.txt
4
2
4
6
8

bda5@augusta:~/112/proj3$ cat v VecTester.cpp
/* VecTester.cpp defines the unit test-methods for Vec, a simple vector class.
 * Student Name:Bryce Allen & Catherine DeJager
 * Date:9-26-17
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 * Edited by: Bryce Allen and Catherine DeJager, for CS 112 project 3 at Calvin College.
 *
 * Bryce Allen:
 * Retrieve [] operator
 * != operator
 * subtraction (-) operator
 * readFrom() method
 *
 * Catherine DeJager:
 * assignment [] operator
 * + operator
 * * operator
 * writeTo() method
 */
 
#include "VecTester.h"
#include <iostream>     // cout, cerr, ...
#include <fstream>      // ifstream, ofstream, ...
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // range_error, ...
using namespace std;

void VecTester::runTests() const {
	cout << "Testing class Vec" << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testDestructor();
	testAssignment();
	testGetSize();
	testSetItem();
	testGetItem();
	testSetSize();
	testEquality();
	testWriteToStream();
	testReadFromStream();
	testInequality();
	testAddition();
	testSubtraction();
	testDotProduct();
	testReadFromFile();
	testWriteToFile();
	testSubscriptOperator();
	cout << "All tests passed!" << endl;
}

void VecTester::testDefaultConstructor() const {
	cout << "Testing default constructor... " << flush;
	Vec v;
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed!" << endl;
}

void VecTester::testExplicitConstructor() const {
	cout << "Testing explicit constructor... " << flush;
	cout << " 1 " << flush;
	Vec v1(3);
	assert( v1.mySize == 3 );
	assert( v1.myArray != NULL );
	for (int i = 0; i < 3; i++) {
		assert( v1.myArray[i] == 0 );
	}
	cout << " 2 " << flush;
	Vec v2(8);
	assert( v2.mySize == 8 );
	assert( v2.myArray != NULL );
	for (int i = 0; i < 8; i++) {
		assert( v2.myArray[i] == 0 );
	}
	cout << " 3 " << flush;
	Vec v3(0);
	assert( v3.mySize == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testCopyConstructor() const {
	cout << "Testing copy constructor..." << flush;
	cout << " 1 " << flush;
	Vec v1;
	Vec v2(v1);
	assert( v2.mySize == 0 );
	assert( v2.myArray == NULL);

	cout << " 2 " << flush;
	Vec v3(5);
	Vec v4(v3);
	assert(v4.mySize == 5);
	assert(v4.myArray != NULL);
	assert(v4.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == 0 );
	}

	cout << " 3 " << flush;
	Vec v5(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.myArray[i] = (i+1);
	}
	Vec v6(v5);
	assert( v6.mySize == 5 );
	assert( v6.myArray != NULL );
	assert( v6.myArray != v5.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == v5.myArray[i] );
	}
	cout << "Passed!" << endl;
}

void VecTester::testDestructor() const {
	cout << "Testing destructor... " << flush;
	Vec v(5);
	v.~Vec();
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed, but make sure ~Vec() is returning the array's memory to the system!" << endl;
}

void VecTester::testAssignment() const {
	cout << "Testing =..." << flush;
	// empty-to-empty
	Vec v, v0;
	v = v0;
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout << " 0 " << flush;
	// empty-to-nonempty
	Vec v1;
	Vec v2(5);
	v2 = v1;
	assert(v2.mySize == 0);
	assert(v2.myArray == NULL);
	cout << " 1 " << flush;
	// nonempty-to-empty
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.myArray[i] = (i+1);
	}
	Vec v4;
	v4 = v3;
	assert( v4.mySize == 5 );
	assert( v4.myArray != v3.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == (i+1) );
	}
	cout << " 2 " << flush;
	// nonempty-to-nonempty (larger into smaller)
	Vec v5(2);
	for (unsigned i = 0; i < 2; i++) {
		v5.myArray[i] = (i+1)*10;
	}
	v5 = v3;
	assert(v5.mySize == 5);
	assert(v5.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v5.myArray[i] == (i+1) );
	}
	cout << " 3 " << flush;
	// nonempty-to-nonempty (smaller into larger)
	Vec v6(7);
	for (unsigned i = 0; i < 7; i++) {
		v6.myArray[i] = (i+1)*10;
	}
	v6 = v3;
	assert(v6.mySize == 5);
	assert(v6.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == (i+1) );
	}
	cout << " 4 " << flush;
	// nonempty-to-nonempty (equal sized)
	Vec v7(5);
	for (unsigned i = 0; i < 5; i++) {
		v7.myArray[i] = (i+1)*10;
	}
	v7 = v3;
	assert(v7.mySize == 5);
	assert(v7.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v7.myArray[i] == (i+1) );
	}
	cout << " 5 " << flush;
	// assignment chaining
	Vec v8;
	Vec v9(4);
	v9 = v8 = v3;
	assert( v9.mySize == 5 );
	assert( v9.mySize == 5 );
	assert( v8.myArray != v3.myArray );
	assert( v8.myArray != v3.myArray );
	assert( v9.myArray != v8.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v8.myArray[i] == (i+1) );
		assert( v9.myArray[i] == (i+1) );
	}
	cout << " 6 " << flush;
	// self-assignment (idiotic but legal)
	v3 = v3;
	assert( v3.mySize == 5 );
	assert( v3.myArray != NULL );
	for (unsigned i = 0; i < 5; i++) {
		assert(v3.myArray[i] == (i+1) );
	}
	cout << " 7 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testGetSize() const {
	cout << "Testing getSize()..." << flush;
	Vec v1;
	assert( v1.getSize() == 0 );
	cout << " 1 " << flush;
	Vec v2(5);
	assert( v2.getSize() == 5 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSetItem() const {
	cout << "Testing setItem()... " << flush;
	// empty case
	Vec v0;
	try {
		v0.setItem(0, 11);
		cerr << "setItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// nonempty case, valid subscript
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.myArray[i] == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty case, invalid subscript
	Vec v2(3);
	try {
		v2.setItem(3, 33);
		cerr << "setItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testGetItem() const {
	cout << "Testing getItem()... " << flush;
	// empty Vec
	Vec v0;
	try {
		v0.getItem(0);
		cerr << "getItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// non-empty, valid access
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.getItem(i) == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty Vec, invalid index
	Vec v2(3);
	try {
		v2.getItem(3);
		cerr << "getItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSetSize() const {
	cout << "Testing setSize()..." << flush;
	// empty
	Vec v0;
	v0.setSize(3);
	assert( v0.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v0.getItem(i) == 0 );
	}
	cout << " 0 " << flush;

	// non-empty, increasing
	Vec v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i+1);
	}
	Item * saveAddress = v1.myArray;
	v1.setSize(8);
	assert( v1.getSize() == 8 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v1.getItem(i) == (i+1) );
	}
	for (unsigned i = 5; i < 8; i++) {
		assert( v1.getItem(i) == 0 );
	}
	assert( v1.myArray != saveAddress );
	cout << " 1 " << flush;

	// non-empty, decreasing
	Vec v2(5);
	for (unsigned i = 0; i < 5; i++) {
		v2.setItem(i, i+1);
	}
	saveAddress = v2.myArray;
	v2.setSize(3);
	assert( v2.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v2.getItem(i) == (i+1) );
	}
	assert( v2.myArray != saveAddress );
	cout << " 2 " << flush;

	// non-empty, same-size
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.setItem(i, i+1);
	}
	saveAddress = v3.myArray;
	v3.setSize(5);
	assert( v3.getSize() == 5 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v3.getItem(i) == (i+1) );
	}
	assert( v3.myArray == saveAddress );
	cout << " 3 " << flush;
	// set size to zero
	v3.setSize(0);
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testEquality() const {
	cout << "Testing ==..." << flush;
	// empty case
	Vec v1;
	Vec v2;
	assert( v1 == v2 );
	cout << " 1 " << flush;

	// nonempty, same size, default values
	Vec v3(5);
	Vec v4(5);
	assert( v3 == v4 );
	cout << " 2 " << flush;

	// nonempty, same size, set values
	Vec v5(5);
	Vec v6(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.setItem(i, i+1);
		v6.setItem(i, i+1);
	}
	assert( v5 == v6 );
	cout << " 3 " << flush;

	// empty vs nonempty
	Vec v7;
	Vec v8(5);
	assert( !(v7 == v8) );
	cout << " 4 " << flush;

	// nonempty, same size, first value different
	Vec v9(5);
	Vec v10(5);
	Vec v11(5);
	Vec v12(5);
	v10.setItem(0, 1);
	assert( !(v9 == v10) );
	cout << " 5 " << flush;

	// nonempty, same size, middle value different
	v11.setItem(2, 1);
	assert( !(v9 == v11) );
	cout << " 6 " << flush;

	// nonempty, same size, last value different
	v12.setItem(4, 1);
	assert( !(v9 == v12) );
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testWriteToStream() const {
      cout << "Testing writeTo(ostream)... " << flush;
      Vec v1(5);
      for (unsigned i = 0; i < 5; i++) {
              v1.setItem(i, i+10);
      }
	// write to an ofstream instead of cout, to automate the test
      ofstream fout("vecStreamOut.txt");
      assert( fout.is_open() );
      fout << v1.getSize() << "\n";
      v1.writeTo(fout);
	fout.close();
	// now read in what we just wrote...
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
      unsigned size;
      fin >> size;
      assert( size == 5 );
      double value;
      for (unsigned i = 0; i < 5; i++) {
              fin >> value;
              assert( value == i+10 );
      }
      cout << "Passed! See 'vecStreamOut.txt' for values..." <<
      endl;
}

void VecTester::testReadFromStream() const {
      cout << "Testing readFrom(istream)... " << flush;
	// an ifstream is-an istream, so use one to automate the test
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
	// get the size and build the Vec
      unsigned size;
      fin >> size;
      assert( size == 5 );
      Vec v(size);
	// test readFrom()
      v.readFrom(fin);
      for (unsigned i = 0; i < 5; i++) {
              assert( v.getItem(i)== i+10 );
      }
	fin.close();
      cout << "Passed!" << endl;
}

void VecTester::testInequality() const {
	cout << "Testing !=... " << flush;
	// empty
	Vec v0;
	Vec v1;
	assert( !(v0 != v1) );
	cout << " 0 " << flush;
	// empty vs nonempty
	Vec v2(3);
	assert( v1 != v2 );
	cout << " 1 " << flush;
	// equal sized, same values
	Vec v3(3);
	Vec v4(3);
	assert( !(v3 != v4) );
	cout << " 2 " << flush;
	// equal sized, different values
	for (unsigned i = 0; i < 3; i++) {
		v4.myArray[i] = i+1;
	}
	assert( v3 != v4 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testAddition() const {
	cout << "Testing +... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;    // for test 2 below
	Vec v3 = v1 + v2;
	assert( v3.getItem(0) == 3 );
	assert( v3.getItem(1) == 6 );
	assert( v3.getItem(2) == 9 );
	cout << " 1 " << flush;
	// addition should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 + v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 + v4;
		cerr << "v2 + v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSubtraction() const {
	cout << "Testing -... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	Vec v3 = v1 - v2;
	assert( v3.getItem(0) == -1 );
	assert( v3.getItem(1) == -2 );
	assert( v3.getItem(2) == -3 );
	cout << " 1 " << flush;
	// subtraction should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 - v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 - v4;
		cerr << "v2 - v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testDotProduct() const {
	cout << "Testing *... " << flush;
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	double product = v1 * v2;
	assert( product == 28 );
	cout << " 1 " << flush;
	// dot product should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	product = v4 * v5;
	assert( product == 0 );
	cout << " 3 " << flush;
	// different sizes
	try {
		product = v2 * v4;
		cerr << "v2 * v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testReadFromFile() const {
	cout << "Testing readFrom()... " << flush;
	Vec v1;
	v1.readFrom("vecTest1.txt");

	assert( v1.getSize() == 3 );
	assert( v1.myArray != NULL );
	assert( v1.getItem(0) == 1 );
	assert( v1.getItem(1) == 2 );
	assert( v1.getItem(2) == 3 );
	cout << " 1 " << flush;

	Vec v2(5);
	Item* oldAddr = v2.myArray;
	v2.readFrom("vecTest2.txt");
	assert( v2.getSize() == 4 );
	cout << " 2 " << flush;
	assert( v2.myArray != NULL );
	assert( v2.getItem(0) == 2 );
	assert( v2.getItem(1) == 4 );
	assert( v2.getItem(2) == 6 );
	assert( v2.getItem(3) == 8 );
//       /* the last assertion assumes that the new array's base
//        *  address is different from the old array's base address,
//        *  which may not be true. If your method seems to be right,
//	*  is correctly using delete to deallocate the old array,
//        *  and passes all assertions except this one, you may
//        *  comment out this assertion.
//        */
	assert( v2.myArray != oldAddr );
	cout << " 3 " << flush;
	cout << "Passed! Make sure you close the file..." << endl;
}
//
void VecTester::testWriteToFile() const {
	cout << "Testing writeTo()... " << flush;
	// read a vector we know into an empty Vec...
	Vec v1;
	v1.readFrom("vecTest1.txt");
	// make a copy of it in a different file
	v1.writeTo("vecTest1Copy.txt");
	cout << " 1 " << flush;
	cout << "vecTest1Copy.txt created " << flush;
	// read in the copy, and check it
	Vec v3;
	v3.readFrom("vecTest1Copy.txt");
      assert( v3.getSize() == 3 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 1 );
      assert( v3.getItem(1) == 2 );
      assert( v3.getItem(2) == 3 );
      cout << " 2 " << flush;

	// read a vector we know into a nonempty Vec...
	Vec v2(5);
	v2.readFrom("vecTest2.txt");
	// make a copy of it in a different file
	v2.writeTo("vecTest2Copy.txt");
	cout << " 3 " << flush;
	cout << "vecTest2Copy.txt created " << flush;
	// read in the copy and check it
	v3.readFrom("vecTest2Copy.txt");
      assert( v3.getSize() == 4 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 2 );
      assert( v3.getItem(1) == 4 );
      assert( v3.getItem(2) == 6 );
      assert( v3.getItem(3) == 8 );
      cout << " 4 " << flush;
	cout << "Passed!  Make sure you closed the file..." << endl;
}
/*
 * Tests the Subscript ([]) operator.
 * Written by Bryce Allen and Catherine DeJager.
 */
void VecTester::testSubscriptOperator() const{
	cout << "Testing the subscript... " << flush;
	// checking empty vector with read...
	Vec v0;
	assert( v0.mySize == 0 );
	assert( v0.myArray == NULL );
	try{
		cout<< v0[0] << flush;
		cerr<< "subscript read succeeded on empty Vec.";
		exit(1);
	}catch(range_error& re){
		cout<< " 0 ";
	}
	Vec v1(5);
	//Reading the subscript non-empty vector test...
	for( unsigned i = 0; i<v1.mySize; i++ ){
		v1.setItem(i, i+1);
	}

	for( unsigned i = 0; i<v1.mySize; i++ ){
		assert( v1[i] == i+1 );
	}
	//reading out of range...
	try{
		cout<<v1[5]<<flush;
		cerr<< "subscript read works out of range";
		exit(1);
	}catch(range_error& re){
		cout<<" 1 "<< flush;
	}
	cout<< " 2 "<< flush;
	//assign within range...
	for( unsigned i = 0; i<v1.mySize; i++ )
	{
		v1[i] = i+2;
	}
	for( unsigned i = 0; i<v1.mySize; i++ ){
		assert( v1[i] == i+2 );
	}
	//assign out of range...
	Vec v2(4);
	try{
		v2[4] = 1;
		cerr<< "Vec works out of range.";
		exit(1);
	}catch(range_error& re){
		cout<<" 3 "<< flush;
	}
	cout<< " 4 "<< flush;
	// assign to an empty Vector...
	try{
		v0[1]=0;
		cerr<< "Vec works when assigning a value to an empty vector.";
		exit(1);
	}catch(range_error& re){
		cout<<" 5 "<< flush;
	}
	cout<< "passed subscript operator..."<< endl;
}

bda5@augusta:~/112/proj3$ cat VecTester.h
/* VecTester.h provides unit tests for Vec, a simple vector class.
 * Student Name:Bryce Allen & Catherine DeJager
 * Date:9-26-17
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 * Edited by: Bryce Allen and Catherine DeJager, for CS 112 project 3 at Calvin College.
 *
 * Bryce Allen:
 * Retrieve [] operator
 * != operator
 * subtraction (-) operator
 * readFrom() method
 *
 * Catherine DeJager:
 * assignment [] operator
 * + operator
 * * operator
 * writeTo() method
 */
 
#ifndef VECTESTER_H_
#define VECTESTER_H_

#include "Vec.h"

class VecTester {
public:
	void runTests() const;
	void testDefaultConstructor() const;
	void testExplicitConstructor() const;
	void testDestructor() const;
	void testGetSize() const;
	void testSetItem() const;
	void testGetItem() const;
	void testSetSize() const;
	void testCopyConstructor() const;
	void testAssignment() const;
	void testEquality() const;
	void testWriteToStream() const;
	void testReadFromStream() const;
	void testInequality() const;
	void testAddition() const;
	void testSubtraction() const;
	void testDotProduct() const;
	void testReadFromFile() const;
	void testWriteToFile() const;
	void testSubscriptOperator() const;
	//void print(Vec& v) const;
};

#endif /*VECTESTER_H_*/
bda5@augusta:~/112/proj3$ cd Debug
bda5@augusta:~/112/proj3/Debug$ ls
Application.d  objects.mk  subdir.mk  Vec.d	   VecTester.o
Application.o  proj3	   tester.d   Vec.o
makefile       sources.mk  tester.o   VecTester.d
bda5@augusta:~/112/proj3/Debug$ make all
make: Nothing to be done for 'all'.
bda5@augusta:~/112/proj3/Debug$ cd ..
bda5@augusta:~/112/proj3$ .\Debug\proj3
bash: .Debugproj3: command not found
bda5@augusta:~/112/proj3$ ./Debug/proj3
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2  3  4 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
Testing the subscript...  0  1  2  3  4  5 passed subscript operator...
All tests passed!
Welcome to vector simulator application!
Enter the number of dimensions...
3
Enter a starting position...
Enter a value for dimension 1
0
Enter a value for dimension 2
0
Enter a value for dimension 3
0
Enter as many Vectors as you would like.
Enter a value for dimension 1
1
Enter a value for dimension 2
0
Enter a value for dimension 3
0
0You have entered 1 position(s).
Would you want to put in another position? (y for yes, anything else for no)
y
Enter a value for dimension 1
0
Enter a value for dimension 2
1
Enter a value for dimension 3
0
1You have entered 2 position(s).
Would you want to put in another position? (y for yes, anything else for no)
y
Enter a value for dimension 1
0
Enter a value for dimension 2
0
Enter a value for dimension 3
1
2You have entered 3 position(s).
Would you want to put in another position? (y for yes, anything else for no)
n
Here is the sum of all the positions: 
1 1 1 bda5@augusta:~/112/proj3$ ./Debug/proj3
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2  3  4 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
Testing the subscript...  0  1  2  3  4  5 passed subscript operator...
All tests passed!
Welcome to vector simulator application!
Enter the number of dimensions...
3
Enter a starting position...
Enter a value for dimension 1
-1
Enter a value for dimension 2
-1
Enter a value for dimension 3
-1
Enter as many Vectors as you would like.
Enter a value for dimension 1
-2
Enter a value for dimension 2
-2
Enter a value for dimension 3
-2
0You have entered 1 position(s).
Would you want to put in another position? (y for yes, anything else for no)
y
Enter a value for dimension 1
-3
Enter a value for dimension 2
-3
Enter a value for dimension 3
-3
1You have entered 2 position(s).
Would you want to put in another position? (y for yes, anything else for no)
n
Here is the sum of all the positions: 
-6 -6 -6 bda5@augusta:~/112/proj3$ [Kbda5@augusta:~/112/proj3$ ./Debug/proj3
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2  3  4 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
Testing the subscript...  0  1  2  3  4  5 passed subscript operator...
All tests passed!
Welcome to vector simulator application!
Enter the number of dimensions...
-25   13  2
Enter a starting position...
Enter a value for dimension 1
0
Enter a value for dimension 2
0
Enter as many Vectors as you would like.
Enter a value for dimension 1
0
Enter a value for dimension 2
0
0You have entered 1 position(s).
Would you want to put in another position? (y for yes, anything else for no)
y
Enter a value for dimension 1
0
Enter a value for dimension 2
0
1You have entered 2 position(s).
Would you want to put in another position? (y for yes, anything else for no)
0 y
Enter a value for dimension 1
0
Enter a value for dimension 2
0
2You have entered 3 position(s).
Would you want to put in another position? (y for yes, anything else for no)
n
Here is the sum of all the positions: 
0 0 bda5@augusta:~/112/proj3$ ./Debug/proj3
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2  3  4 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
Testing the subscript...  0  1  2  3  4  5 passed subscript operator...
All tests passed!
Welcome to vector simulator application!
Enter the number of dimensions...
0
Enter a starting position...
Enter as many Vectors as you would like.
0You have entered 1 position(s).
Would you want to put in another position? (y for yes, anything else for no)
y
1You have entered 2 position(s).
Would you want to put in another position? (y for yes, anything else for no)
y
2You have entered 3 position(s).
Would you want to put in another position? (y for yes, anything else for no)
y
3You have entered 4 position(s).
Would you want to put in another position? (y for yes, anything else for no)
y
4You have entered 5 position(s).
Would you want to put in another position? (y for yes, anything else for no)
n
Here is the sum of all the positions: 
bda5@augusta:~/112/proj3$ [Kbda5@augusta:~/112/proj3$ exit

Script done on Mon 02 Oct 2017 07:12:28 PM EDT
